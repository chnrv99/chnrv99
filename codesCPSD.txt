#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;
const char* serviceUUID = "4fafc201-1fb5-459e-8fcc-c5c9c331914b";
const char* charUUID = "beb5483e-36e1-4688-b7f5-ea07361b26a8";

class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
  };

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
  }
};

void setup() {
  Serial.begin(115200);
  // Set the custom BLE name here
  BLEDevice::init("My_ESP32_BLE");

  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService *pService = pServer->createService(serviceUUID);
  
  pCharacteristic = pService->createCharacteristic(
                      charUUID,
                      BLECharacteristic::PROPERTY_READ   |
                      BLECharacteristic::PROPERTY_WRITE  |
                      BLECharacteristic::PROPERTY_NOTIFY |
                      BLECharacteristic::PROPERTY_INDICATE
                    );

  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();
  pServer->getAdvertising()->start();
  Serial.println("Waiting for a client connection to notify...");
}

void loop() {
  if (deviceConnected) {
    pCharacteristic->setValue("Hello from ESP32");
    pCharacteristic->notify();
    delay(1000);
  }
}


ESP32 sensor data to rasberry pi
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;
const char* serviceUUID = "4fafc201-1fb5-459e-8fcc-c5c9c331914b";
const char* charUUID = "beb5483e-36e1-4688-b7f5-ea07361b26a8";

class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
  };

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
  }
};

void setup() {
  Serial.begin(115200);
  // Set the custom BLE name here
  BLEDevice::init("My_ESP32_BLE");

  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService *pService = pServer->createService(serviceUUID);
  
  pCharacteristic = pService->createCharacteristic(
                      charUUID,
                      BLECharacteristic::PROPERTY_READ   |
                      BLECharacteristic::PROPERTY_WRITE  |
                      BLECharacteristic::PROPERTY_NOTIFY |
                      BLECharacteristic::PROPERTY_INDICATE
                    );

  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();
  pServer->getAdvertising()->start();
  Serial.println("Waiting for a client connection to notify...");
}

void loop() {
  if (deviceConnected) {
    // Generate dummy temperature and humidity values
    float temperature = random(200, 300) / 10.0; // Random temp between 20.0 and 30.0
    float humidity = random(400, 600) / 10.0;    // Random humidity between 40.0 and 60.0

    // Format the data as a JSON-like string
    String data = "{\"temperature\": " + String(temperature, 1) + ", \"humidity\": " + String(humidity, 1) + "}";

    // Send the data over BLE
    pCharacteristic->setValue(data.c_str());
    pCharacteristic->notify();

    Serial.println("Sent data: " + data);

    delay(1000); // Wait for 1 second before sending new data
  }
}


Rasberry pi code
from bluepy import btle
import json
import time
import requests

# UUIDs must match those in the ESP32 script
SERVICE_UUID = "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
CHARACTERISTIC_UUID = "beb5483e-36e1-4688-b7f5-ea07361b26a8"
API_ENDPOINT = "https://cpsdproject.azurewebsites.net/api/data"

class MyDelegate(btle.DefaultDelegate):
    def __init__(self):
        btle.DefaultDelegate.__init__(self)

    def handleNotification(self, cHandle, data):
        # Decode and process the received data
        data_str = data.decode('utf-8')
        print("Received data:", data_str)

        try:
            # Parse the JSON-like string into a dictionary
            sensor_data = json.loads(data_str)
            temperature = sensor_data.get("temperature", "N/A")
            humidity = sensor_data.get("humidity", "N/A")

            # Print the values
            print(f"Temperature: {temperature} °C, Humidity: {humidity} %")

            # Prepare the payload for the POST request
            payload = {
                "sensor_data": {
                    "temperature": temperature,
                    "humidity": humidity
                }
            }

            # Send the POST request to the API endpoint
            response = requests.post(API_ENDPOINT, json=payload)
            
            # Check for a successful response
            if response.status_code == 200:
                print("Data successfully sent to Azure API!")
            else:
                print(f"Failed to send data. Status code: {response.status_code}, Response: {response.text}")

        except json.JSONDecodeError:
            print("Failed to parse the received data")

def main():
    # Replace this with your ESP32's MAC address after scanning for BLE devices
    esp32_mac_address = "XX:XX:XX:XX:XX:XX"

    # Connect to the ESP32
    print("Connecting to ESP32...")
    peripheral = btle.Peripheral(esp32_mac_address)
    peripheral.setDelegate(MyDelegate())

    # Get the service and characteristic
    service = peripheral.getServiceByUUID(SERVICE_UUID)
    characteristic = service.getCharacteristics(CHARACTERISTIC_UUID)[0]

    # Enable notifications
    peripheral.writeCharacteristic(characteristic.getHandle() + 1, b'\x01\x00', withResponse=True)

    # Loop to continuously receive notifications
    try:
        while True:
            if peripheral.waitForNotifications(1.0):
                # Handle the notification
                continue

            print("Waiting for data...")
            time.sleep(1)

    except KeyboardInterrupt:
        print("Program stopped by user")
    finally:
        peripheral.disconnect()
        print("Disconnected from ESP32")

if __name__ == "__main__":
    main()




new code
import pygatt
import json
import time
import requests

# UUIDs must match those in the ESP32 script
SERVICE_UUID = "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
CHARACTERISTIC_UUID = "beb5483e-36e1-4688-b7f5-ea07361b26a8"
API_ENDPOINT = "https://cpsdproject.azurewebsites.net/api/data"

def send_data_to_api(temperature, humidity):
    # Prepare the payload for the POST request
    payload = {
        "sensor_data": {
            "temperature": temperature,
            "humidity": humidity
        }
    }

    # Send the POST request to the API endpoint
    response = requests.post(API_ENDPOINT, json=payload)

    # Check for a successful response
    if response.status_code == 200:
        print("Data successfully sent to Azure API!")
    else:
        print(f"Failed to send data. Status code: {response.status_code}, Response: {response.text}")

def main():
    # Replace this with your ESP32's MAC address after scanning for BLE devices
    esp32_mac_address = "XX:XX:XX:XX:XX:XX"

    # Initialize the adapter
    adapter = pygatt.GATTToolBackend()
    adapter.start()

    try:
        print("Connecting to ESP32...")
        device = adapter.connect(esp32_mac_address)

        while True:
            # Read the characteristic value
            data = device.char_read(CHARACTERISTIC_UUID)
            data_str = data.decode('utf-8')
            print("Received data:", data_str)

            try:
                # Parse the JSON-like string into a dictionary
                sensor_data = json.loads(data_str)
                temperature = sensor_data.get("temperature", "N/A")
                humidity = sensor_data.get("humidity", "N/A")

                # Print the values
                print(f"Temperature: {temperature} °C, Humidity: {humidity} %")

                # Send the data to Azure API
                send_data_to_api(temperature, humidity)

            except json.JSONDecodeError:
                print("Failed to parse the received data")

            time.sleep(1)

    except pygatt.exceptions.NotConnectedError:
        print("Failed to connect to the device")
    except KeyboardInterrupt:
        print("Program stopped by user")
    finally:
        adapter.stop()
        print("Disconnected from ESP32")

if __name__ == "__main__":
    main()






-------------------------
ESP32
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>



BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;
const char* serviceUUID = "4fafc201-1fb5-459e-8fcc-c5c9c331914b";
const char* charUUID = "beb5483e-36e1-4688-b7f5-ea07361b26a8";

class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
  };

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
  }
};

void setup() {
  Serial.begin(115200);
  // Set the custom BLE name here
  BLEDevice::init("My_ESP32_BLE");
  

  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService *pService = pServer->createService(serviceUUID);
  
  pCharacteristic = pService->createCharacteristic(
                      charUUID,
                      BLECharacteristic::PROPERTY_READ   |
                      BLECharacteristic::PROPERTY_WRITE  |
                      BLECharacteristic::PROPERTY_NOTIFY |
                      BLECharacteristic::PROPERTY_INDICATE
                    );

  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();
  pServer->getAdvertising()->start();
  Serial.println("Waiting for a client connection to notify...");
}

void loop() {
  if (deviceConnected) {
    // Generate dummy temperature and humidity values
    float temperature = random(200, 300) / 10.0; // Random temp between 20.0 and 30.0
    float humidity = random(400, 600) / 10.0;    // Random humidity between 40.0 and 60.0

    // Format the data as a JSON-like string
    String data = "{\"temperature\": " + String(temperature, 1) + ", \"humidity\": " + String(humidity, 1) + "}";

    // Send the data over BLE
    pCharacteristic->setValue(data.c_str());
    pCharacteristic->notify();

    Serial.println("Sent data: " + data);

    delay(1000); // Wait for 1 second before sending new data
  }
}
