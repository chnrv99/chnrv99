 Python Code to Read DHT Sensor
Example Code for DHT Sensor
python
import Adafruit_DHT

# Set the sensor type (DHT11, DHT22, or AM2302)
sensor = Adafruit_DHT.DHT22  # Change to DHT11 if you're using that model

# Set the GPIO pin where the data pin of the DHT sensor is connected
pin = 4  # GPIO4 (physical pin 7)

# Read the temperature and humidity
humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)

if humidity is not None and temperature is not None:
    print(f"Temp: {temperature:.1f}°C  Humidity: {humidity:.1f}%")
else:
    print("Failed to retrieve data from the sensor")

------------------------------------------------------------------------------------

Example Implementation
Basic Structure
Broker: A test broker like broker.emqx.io or test.mosquitto.org can be used.
QoS Levels: Set using the qos parameter in the publish and subscribe methods.
Publisher Code
python
import paho.mqtt.client as mqtt

# Define the broker and port
BROKER = "broker.emqx.io"
PORT = 1883
TOPIC = "test/qos_example"

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Connected successfully to the broker!")
    else:
        print("Connection failed with code", rc)

# Initialize MQTT client
client = mqtt.Client()

# Assign callback functions
client.on_connect = on_connect

# Connect to the broker
client.connect(BROKER, PORT, 60)

# Publish messages with different QoS levels
client.loop_start()
for qos in [0, 1, 2]:
    message = f"Message with QoS {qos}"
    client.publish(TOPIC, message, qos=qos)
    print(f"Published: {message} with QoS {qos}")

client.loop_stop()
client.disconnect()
Subscriber Code
python
Copy code
import paho.mqtt.client as mqtt

# Define the broker and port
BROKER = "broker.emqx.io"
PORT = 1883
TOPIC = "test/qos_example"

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Connected successfully to the broker!")
        # Subscribe to the topic with different QoS levels
        client.subscribe(TOPIC, qos=2)
    else:
        print("Connection failed with code", rc)

def on_message(client, userdata, msg):
    print(f"Received message: {msg.payload.decode()} from topic: {msg.topic} with QoS {msg.qos}")

# Initialize MQTT client
client = mqtt.Client()

# Assign callback functions
client.on_connect = on_connect
client.on_message = on_message

# Connect to the broker
client.connect(BROKER, PORT, 60)

# Start the loop to process messages
client.loop_forever()



-----------------------------------------------------
Code to Measure Distance
Upload the following code to your Arduino:

cpp
Copy code
// Define pins for Trig and Echo
const int trigPin = 9;
const int echoPin = 10;

// Variable to store the calculated distance
long duration;
float distance;

void setup() {
  pinMode(trigPin, OUTPUT); // Set Trig as OUTPUT
  pinMode(echoPin, INPUT);  // Set Echo as INPUT
  Serial.begin(9600);       // Initialize Serial Monitor
}

void loop() {
  // Send a 10µs HIGH pulse to Trig
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Measure the duration of the pulse on Echo
  duration = pulseIn(echoPin, HIGH);

  // Calculate the distance in centimeters
  distance = duration * 0.034 / 2;

  // Print the distance to the Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  delay(500);  // Wait for 500ms before the next measurement
}
