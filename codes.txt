import socket

# Set up the server
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host = 'localhost'  # Server's hostname or IP address
port = 12345  # Port number for communication

# Bind the socket to the address and port
server_socket.bind((host, port))

# Start listening for connections
server_socket.listen(5)
print(f"Server listening on {host}:{port}")

while True:
    # Accept a client connection
    client_socket, addr = server_socket.accept()
    print(f"Got a connection from {addr}")
    
    # Receive data from the client
    data = client_socket.recv(1024).decode('utf-8')
    print(f"Received from client: {data}")
    
    # Send a response back to the client
    client_socket.send("Hello from server".encode('utf-8'))
    
    # Close the connection
    client_socket.close()


import socket

# Set up the client
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host = 'localhost'  # Server's hostname or IP address
port = 12345  # Same port as the server

# Connect to the server
client_socket.connect((host, port))

# Send data to the server
client_socket.send("Hello from client".encode('utf-8'))

# Receive data from the server
data = client_socket.recv(1024).decode('utf-8')
print(f"Received from server: {data}")

# Close the connection
client_socket.close()

Diffie hellman
# Diffie-Hellman Code

# Power function to return value of a^b mod P
def power(a, b, p):
    if b == 1:
        return a
    else:
        return pow(a, b) % p

# Main function
def main():
    # Both persons agree upon the public keys G and P
    # A prime number P is taken
    P = 23
    print("The value of P:", P)

    # A primitive root for P, G is taken
    G = 9
    print("The value of G:", G)

    # Alice chooses the private key a
    # a is the chosen private key
    a = 4
    print("The private key a for Alice:", a)

    # Gets the generated key
    x = power(G, a, P)

    # Bob chooses the private key b
    # b is the chosen private key
    b = 3
    print("The private key b for Bob:", b)

    # Gets the generated key
    y = power(G, b, P)

    # Generating the secret key after the exchange of keys
    ka = power(y, a, P)  # Secret key for Alice
    kb = power(x, b, P)  # Secret key for Bob

    print("Secret key for Alice is:", ka)
    print("Secret key for Bob is:", kb)

if __name__ == "__main__":
    main()


MITM Diffie hellman
import random
 
# public keys are taken
# p is a prime number
# g is a primitive root of p
p = int(input('Enter a prime number : '))
g = int(input('Enter a number : '))
 
 
class A:
    def __init__(self):
        # Generating a random private number selected by alice
        self.n = random.randint(1, p)     
 
    def publish(self):
        # generating public values
        return (g**self.n)%p
 
    def compute_secret(self, gb):
        # computing secret key
        return (gb**self.n)%p
 
 
class B:
    def __init__(self):
        # Generating a random private number selected for alice
        self.a = random.randint(1, p)
        # Generating a random private number selected for bob
        self.b = random.randint(1, p)
        self.arr = [self.a,self.b]
 
    def publish(self, i):
        # generating public values
        return (g**self.arr[i])%p
 
    def compute_secret(self, ga, i):
        # computing secret key
        return (ga**self.arr[i])%p
 
 
alice = A()
bob = A()
eve = B()
 
# Printing out the private selected number by Alice and Bob
print(f'Alice selected (a) : {alice.n}')
print(f'Bob selected (b) : {bob.n}')
print(f'Eve selected private number for Alice (c) : {eve.a}')
print(f'Eve selected private number for Bob (d) : {eve.b}')
 
# Generating public values 
ga = alice.publish()
gb = bob.publish()
gea = eve.publish(0)
geb = eve.publish(1)
print(f'Alice published (ga): {ga}')
print(f'Bob published (gb): {gb}')
print(f'Eve published value for Alice (gc): {gea}')
print(f'Eve published value for Bob (gd): {geb}')
 
# Computing the secret key
sa = alice.compute_secret(gea)
sea = eve.compute_secret(ga,0)
sb = bob.compute_secret(geb)
seb = eve.compute_secret(gb,1)
print(f'Alice computed (S1) : {sa}')
print(f'Eve computed key for Alice (S1) : {sea}')
print(f'Bob computed (S2) : {sb}')
print(f'Eve computed key for Bob (S2) : {seb}')
