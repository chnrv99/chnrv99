import socket

# Set up the server
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host = 'localhost'  # Server's hostname or IP address
port = 12345  # Port number for communication

# Bind the socket to the address and port
server_socket.bind((host, port))

# Start listening for connections
server_socket.listen(5)
print(f"Server listening on {host}:{port}")

while True:
    # Accept a client connection
    client_socket, addr = server_socket.accept()
    print(f"Got a connection from {addr}")
    
    # Receive data from the client
    data = client_socket.recv(1024).decode('utf-8')
    print(f"Received from client: {data}")
    
    # Send a response back to the client
    client_socket.send("Hello from server".encode('utf-8'))
    
    # Close the connection
    client_socket.close()


import socket

# Set up the client
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host = 'localhost'  # Server's hostname or IP address
port = 12345  # Same port as the server

# Connect to the server
client_socket.connect((host, port))

# Send data to the server
client_socket.send("Hello from client".encode('utf-8'))

# Receive data from the server
data = client_socket.recv(1024).decode('utf-8')
print(f"Received from server: {data}")

# Close the connection
client_socket.close()

Diffie hellman
# Diffie-Hellman Code

# Power function to return value of a^b mod P
def power(a, b, p):
    if b == 1:
        return a
    else:
        return pow(a, b) % p

# Main function
def main():
    # Both persons agree upon the public keys G and P
    # A prime number P is taken
    P = 23
    print("The value of P:", P)

    # A primitive root for P, G is taken
    G = 9
    print("The value of G:", G)

    # Alice chooses the private key a
    # a is the chosen private key
    a = 4
    print("The private key a for Alice:", a)

    # Gets the generated key
    x = power(G, a, P)

    # Bob chooses the private key b
    # b is the chosen private key
    b = 3
    print("The private key b for Bob:", b)

    # Gets the generated key
    y = power(G, b, P)

    # Generating the secret key after the exchange of keys
    ka = power(y, a, P)  # Secret key for Alice
    kb = power(x, b, P)  # Secret key for Bob

    print("Secret key for Alice is:", ka)
    print("Secret key for Bob is:", kb)

if __name__ == "__main__":
    main()

